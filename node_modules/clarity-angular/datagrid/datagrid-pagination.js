import { Component, Input, Output, EventEmitter } from "@angular/core";
import { Page } from "./providers/page";
export var DatagridPagination = (function () {
    function DatagridPagination(page) {
        var _this = this;
        this.page = page;
        this.currentChanged = new EventEmitter(false);
        /*
         * Default page size is 10.
         * The reason we set it in this constructor and not in the provider itself is because
         * we don't want pagination (page size 0) if this component isn't present in the datagrid.
         */
        page.size = 10;
        this._pageSubscription = page.change.subscribe(function (current) { return _this.currentChanged.emit(current); });
    }
    DatagridPagination.prototype.ngOnDestroy = function () {
        this._pageSubscription.unsubscribe();
    };
    Object.defineProperty(DatagridPagination.prototype, "pageSize", {
        /**
         * Page size
         */
        get: function () {
            return this.page.size;
        },
        set: function (size) {
            if (typeof size === "number") {
                this.page.size = size;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "totalItems", {
        /**
         * Total items (needed to guess the last page)
         */
        get: function () {
            return this.page.totalItems;
        },
        set: function (total) {
            if (typeof total === "number") {
                this.page.totalItems = total;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "lastPage", {
        /**
         * Last page
         */
        get: function () {
            return this.page.last;
        },
        set: function (last) {
            if (typeof last === "number") {
                this.page.last = last;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "currentPage", {
        /**
         * Current page
         */
        get: function () {
            return this.page.current;
        },
        set: function (page) {
            if (typeof page === "number") {
                this.page.current = page;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Moves to the previous page if it exists
     */
    DatagridPagination.prototype.previous = function () {
        this.page.previous();
    };
    /**
     * Moves to the next page if it exists
     */
    DatagridPagination.prototype.next = function () {
        this.page.next();
    };
    Object.defineProperty(DatagridPagination.prototype, "firstItem", {
        /**
         * Index of the first item displayed on the current page, starting at 0
         */
        get: function () {
            return this.page.firstItem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridPagination.prototype, "lastItem", {
        /**
         * Index of the last item displayed on the current page, starting at 0
         */
        get: function () {
            return this.page.lastItem;
        },
        enumerable: true,
        configurable: true
    });
    DatagridPagination.decorators = [
        { type: Component, args: [{
                    selector: "clr-dg-pagination",
                    template: "\n        <ul class=\"pagination\" *ngIf=\"page.last > 1\">\n            <li *ngIf=\"page.current > 1\">\n                <button class=\"pagination-previous\" (click)=\"page.previous()\"></button>\n            </li>\n            <li *ngIf=\"page.current > 2\">\n                <button (click)=\"page.current = 1\">1</button>\n            </li>\n            <li *ngIf=\"page.current > 3\">...</li>\n            <li *ngIf=\"page.current > 1\">\n                <button (click)=\"page.previous()\">{{page.current - 1}}</button>\n            </li>\n            <li class=\"pagination-current\">{{page.current}}</li>\n            <li *ngIf=\"page.current < page.last\">\n                <button (click)=\"page.next()\">{{page.current + 1}}</button>\n            </li>\n            <li *ngIf=\"page.current < page.last - 2\">...</li>\n            <li *ngIf=\"page.current < page.last - 1\">\n                <button (click)=\"page.current = page.last\">{{page.last}}</button>\n            </li>\n            <li *ngIf=\"page.current < page.last\">\n                <button class=\"pagination-next\" (click)=\"page.next()\"></button>\n            </li>\n        </ul>\n    ",
                    // IE10 comes to pollute even our components declaration
                    styles: [":host { display: block; }"]
                },] },
    ];
    /** @nocollapse */
    DatagridPagination.ctorParameters = function () { return [
        { type: Page, },
    ]; };
    DatagridPagination.propDecorators = {
        'pageSize': [{ type: Input, args: ["clrDgPageSize",] },],
        'totalItems': [{ type: Input, args: ["clrDgTotalItems",] },],
        'lastPage': [{ type: Input, args: ["clrDgLastPage",] },],
        'currentPage': [{ type: Input, args: ["clrDgPage",] },],
        'currentChanged': [{ type: Output, args: ["clrDgPageChange",] },],
    };
    return DatagridPagination;
}());
//# sourceMappingURL=datagrid-pagination.js.map