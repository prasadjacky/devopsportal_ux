var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { Component, ContentChild, HostBinding, Input, Output, EventEmitter } from "@angular/core";
import { DatagridPropertyComparator } from "./built-in/comparators/datagrid-property-comparator";
import { DatagridPropertyStringFilter } from "./built-in/filters/datagrid-property-string-filter";
import { CustomFilter } from "./providers/custom-filter";
import { Sort } from "./providers/sort";
import { DatagridFilterRegistrar } from "./utils/datagrid-filter-registrar";
import { FiltersProvider } from "./providers/filters";
import { DatagridStringFilterImpl } from "./built-in/filters/datagrid-string-filter-impl";
export var DatagridColumn = (function (_super) {
    __extends(DatagridColumn, _super);
    function DatagridColumn(_sort, filters) {
        var _this = this;
        _super.call(this, filters);
        this._sort = _sort;
        /**
         * Indicates if the column is currently sorted
         */
        this._sorted = false;
        this.sortedChange = new EventEmitter();
        /**
         * A custom filter for this column that can be provided in the projected content
         */
        this.customFilter = false;
        this.filterValueChange = new EventEmitter();
        this._sortSubscription = _sort.change.subscribe(function (sort) {
            // We're only listening to make sure we emit an event when the column goes from sorted to unsorted
            if (_this.sorted && sort.comparator !== _this.sortBy) {
                _this._sorted = false;
                _this.sortedChange.emit(false);
            }
        });
    }
    DatagridColumn.prototype.ngOnDestroy = function () {
        this._sortSubscription.unsubscribe();
    };
    Object.defineProperty(DatagridColumn.prototype, "sortable", {
        /**
         * Indicates if the column is sortable
         */
        get: function () {
            return !!this.sortBy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "sorted", {
        get: function () {
            return this._sorted;
        },
        set: function (value) {
            if (!value && this.sorted) {
                this._sorted = false;
                this._sort.clear();
            }
            else if (value && !this.sorted) {
                this.sort();
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * Sorts the datagrid based on this column
     */
    DatagridColumn.prototype.sort = function () {
        if (!this.sortable) {
            return;
        }
        this._sorted = true;
        this._sort.toggle(this.sortBy);
        this.sortedChange.emit(true);
    };
    Object.defineProperty(DatagridColumn.prototype, "asc", {
        /**
         * Indicates if the column is currently sorted in ascending order
         */
        get: function () {
            return this.sorted && !this._sort.reverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "desc", {
        /**
         * Indicates if the column is currently sorted in descending order
         */
        get: function () {
            return this.sorted && this._sort.reverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "projectedFilter", {
        set: function (custom) {
            if (custom) {
                this.deleteFilter();
                this.customFilter = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "field", {
        get: function () {
            return this._field;
        },
        set: function (field) {
            if (typeof field === "string") {
                this._field = field;
                if (!this.customFilter) {
                    this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));
                }
                if (!this.sortBy) {
                    this.sortBy = new DatagridPropertyComparator(field);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridColumn.prototype, "filterValue", {
        get: function () {
            return this.filter.value;
        },
        set: function (newValue) {
            if (!this.filter) {
                return;
            }
            if (!newValue) {
                newValue = "";
            }
            if (newValue !== this.filter.value) {
                this.filter.value = newValue;
                this.filterValueChange.emit(newValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridColumn.decorators = [
        { type: Component, args: [{
                    selector: "clr-dg-column",
                    template: "\n        <div class=\"datagrid-column-flex\">\n            <!-- I'm really not happy with that select since it's not very scalable -->\n            <ng-content select=\"clr-dg-filter, clr-dg-string-filter\"></ng-content>\n\n            <clr-dg-string-filter\n                *ngIf=\"field && !customFilter\"\n                [clrDgStringFilter]=\"registered\"\n                [(clrFilterValue)]=\"filterValue\"></clr-dg-string-filter>\n\n            <button class=\"datagrid-column-title\" [disabled]=\"!sortable\" (click)=\"sort()\">\n                <ng-content></ng-content>\n            </button>\n        </div>\n    ",
                    host: {
                        "[class.datagrid-column]": "true"
                    }
                },] },
    ];
    /** @nocollapse */
    DatagridColumn.ctorParameters = function () { return [
        { type: Sort, },
        { type: FiltersProvider, },
    ]; };
    DatagridColumn.propDecorators = {
        'sortBy': [{ type: Input, args: ["clrDgSortBy",] },],
        'sorted': [{ type: Input, args: ["clrDgSorted",] },],
        'sortedChange': [{ type: Output, args: ["clrDgSortedChange",] },],
        'asc': [{ type: HostBinding, args: ["class.asc",] },],
        'desc': [{ type: HostBinding, args: ["class.desc",] },],
        'projectedFilter': [{ type: ContentChild, args: [CustomFilter,] },],
        'field': [{ type: Input, args: ["clrDgField",] },],
        'filterValue': [{ type: Input, args: ["clrFilterValue",] },],
        'filterValueChange': [{ type: Output, args: ["clrFilterValueChange",] },],
    };
    return DatagridColumn;
}(DatagridFilterRegistrar));
//# sourceMappingURL=datagrid-column.js.map