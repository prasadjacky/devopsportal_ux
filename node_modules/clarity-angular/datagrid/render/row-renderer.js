import { Directive, ContentChildren } from "@angular/core";
import { DatagridRenderOrganizer } from "./render-organizer";
import { DatagridCellRenderer } from "./cell-renderer";
export var DatagridRowRenderer = (function () {
    function DatagridRowRenderer(organizer) {
        var _this = this;
        this.organizer = organizer;
        this.subscription = organizer.alignColumns.subscribe(function () { return _this.setWidths(); });
    }
    DatagridRowRenderer.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    DatagridRowRenderer.prototype.setWidths = function () {
        var _this = this;
        if (this.organizer.widths.length === 0) {
            return;
        }
        this.cells.forEach(function (cell, index) {
            var width = _this.organizer.widths[index];
            cell.setWidth(width.strict, width.px);
        });
    };
    /*
     * Are directives even allowed to do that?
     * It works because it's always attached on the same element as a component since they share the same selector,
     * but it feels like cheating.
     */
    DatagridRowRenderer.prototype.ngAfterViewInit = function () {
        this.setWidths();
    };
    DatagridRowRenderer.decorators = [
        { type: Directive, args: [{
                    selector: "clr-dg-row"
                },] },
    ];
    /** @nocollapse */
    DatagridRowRenderer.ctorParameters = function () { return [
        { type: DatagridRenderOrganizer, },
    ]; };
    DatagridRowRenderer.propDecorators = {
        'cells': [{ type: ContentChildren, args: [DatagridCellRenderer,] },],
    };
    return DatagridRowRenderer;
}());
//# sourceMappingURL=row-renderer.js.map