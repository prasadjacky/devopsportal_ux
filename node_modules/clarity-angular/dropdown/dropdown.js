import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, Output, Renderer } from "@angular/core";
var menuPositions = [
    "bottom-left",
    "bottom-right",
    "top-left",
    "top-right",
    "left-bottom",
    "left-top",
    "right-bottom",
    "right-top"
];
export var Dropdown = (function () {
    function Dropdown(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._open = false;
        this._openChanged = new EventEmitter(false);
        this.isMenuClosable = true;
    }
    Object.defineProperty(Dropdown.prototype, "menuPosition", {
        set: function (pos) {
            if (pos && (menuPositions.indexOf(pos) > -1)) {
                this._menuPosition = pos;
            }
            else {
                this._menuPosition = "bottom-left";
            }
            this.removeExistingDirectionClass();
            this.renderer.setElementClass(this.elementRef.nativeElement, this._menuPosition, true);
        },
        enumerable: true,
        configurable: true
    });
    Dropdown.prototype.removeExistingDirectionClass = function () {
        var currentClassList = this.elementRef.nativeElement.classList;
        menuPositions.forEach(function (direction) {
            if (currentClassList.contains(direction)) {
                currentClassList.toggle(direction);
            }
        });
    };
    Dropdown.prototype.toggleDropdown = function () {
        this.open = !this.open;
    };
    Object.defineProperty(Dropdown.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (val) {
            this._open = val;
            this._openChanged.emit(val);
        },
        enumerable: true,
        configurable: true
    });
    //called on mouse clicks anywhere in the DOM.
    //Checks to see if the mouseclick happened on the host or outside
    Dropdown.prototype.onMouseClick = function (target) {
        if (this._open) {
            var current = target; //Get the element in the DOM on which the mouse was clicked
            var dropdownHost = this.elementRef.nativeElement; //Get the current dropdown native HTML element
            //Start checking if current and dropdownHost are equal. If not traverse to the parentNode and check again.
            while (current) {
                if (current === dropdownHost) {
                    return;
                }
                current = current.parentNode;
            }
            this._open = false; //Remove .open from the dropdown
        }
    };
    Dropdown.decorators = [
        { type: Component, args: [{
                    selector: "clr-dropdown",
                    template: "\n        <ng-content select=\"[clrDropdownToggle]\"></ng-content>\n        <ng-content></ng-content>\n    ",
                    host: {
                        "[class.dropdown]": "true"
                    }
                },] },
    ];
    /** @nocollapse */
    Dropdown.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    Dropdown.propDecorators = {
        '_open': [{ type: HostBinding, args: ["class.open",] }, { type: Input, args: ["clrDropdownMenuOpen",] },],
        '_openChanged': [{ type: Output, args: ["clrDropdownMenuOpenChange",] },],
        'isMenuClosable': [{ type: Input, args: ["clrCloseMenuOnItemClick",] },],
        'menuPosition': [{ type: Input, args: ["clrMenuPosition",] },],
        'onMouseClick': [{ type: HostListener, args: ["document:click", ["$event.target"],] },],
    };
    return Dropdown;
}());
//# sourceMappingURL=dropdown.js.map