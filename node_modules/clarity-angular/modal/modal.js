import { Component, Input, Output, EventEmitter, HostListener, animate, style, transition, trigger } from "@angular/core";
import { ScrollingService } from "../main/scrolling-service";
export var Modal = (function () {
    function Modal(_scrollingService) {
        this._scrollingService = _scrollingService;
        this._open = false;
        this._openChanged = new EventEmitter(false);
        this.closable = true;
        this.staticBackdrop = false;
    }
    Object.defineProperty(Modal.prototype, "sizeClass", {
        get: function () {
            if (this.size) {
                return "modal-" + this.size;
            }
            else {
                return "";
            }
        },
        enumerable: true,
        configurable: true
    });
    //Detect when _open is set to true and set no-scrolling to true
    Modal.prototype.ngOnChanges = function (changes) {
        if (changes && changes.hasOwnProperty("_open")) {
            if (changes["_open"].currentValue) {
                this._scrollingService.stopScrolling();
            }
            else {
                this._scrollingService.resumeScrolling();
            }
        }
    };
    Modal.prototype.ngOnDestroy = function () {
        this._scrollingService.resumeScrolling();
    };
    Modal.prototype.open = function () {
        if (this._open) {
            return;
        }
        this._open = true;
        this._openChanged.emit(true);
    };
    Modal.prototype.close = function () {
        if (!this.closable || this._open === false) {
            return;
        }
        this._open = false;
    };
    Modal.prototype.fadeDone = function (e) {
        if (e.toState === "void") {
            this._openChanged.emit(false);
        }
    };
    Modal.decorators = [
        { type: Component, args: [{
                    selector: "clr-modal",
                    viewProviders: [ScrollingService],
                    template: "\n\n      <!--\n        ~ Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n        ~ This software is released under MIT license.\n        ~ The full license information can be found in LICENSE in the root directory of this project.\n        -->\n\n      <div class=\"modal\" *ngIf=\"_open\">\n          <!--fixme: revisit when ngClass works with exit animation-->\n          <div [@fadeDown] (@fadeDown.done)=\"fadeDone($event)\"\n               class=\"modal-dialog\"\n               [class.modal-sm]=\"size == 'sm'\"\n               [class.modal-lg]=\"size == 'lg'\"\n               [class.modal-xl]=\"size == 'xl'\"\n               role=\"dialog\" aria-hidden=\"true\">\n              <div class=\"modal-content\">\n                  <div class=\"modal-header\">\n                      <button type=\"button\" class=\"close\" aria-label=\"Close\"\n                              *ngIf=\"closable\" (click)=\"close()\">\n                          <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                      </button>\n                      <ng-content select=\".modal-title\"></ng-content>\n                  </div>\n                  <ng-content select=\".modal-body\"></ng-content>\n                  <ng-content select=\".modal-footer\"></ng-content>\n              </div>\n          </div>\n\n          <div [@fade] class=\"modal-backdrop\"\n               aria-hidden=\"true\"\n               (click)=\"staticBackdrop || close()\"></div>\n      </div>\n    ",
                    styles: ["\n        :host { display: inline-block; }\n    "],
                    animations: [
                        trigger("fadeDown", [
                            transition("void => *", [
                                style({
                                    opacity: 0,
                                    transform: "translate(0, -25%)"
                                }),
                                animate("0.2s ease-in-out")]),
                            transition("* => void", [
                                animate("0.2s ease-in-out", style({
                                    opacity: 0,
                                    transform: "translate(0, -25%)"
                                }))])
                        ]),
                        trigger("fade", [
                            transition("void => *", [
                                style({
                                    opacity: 0
                                }),
                                animate("0.2s ease-in-out", style({
                                    opacity: 0.85
                                }))
                            ]),
                            transition("* => void", [
                                animate("0.2s ease-in-out", style({
                                    opacity: 0
                                }))
                            ])
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    Modal.ctorParameters = function () { return [
        { type: ScrollingService, },
    ]; };
    Modal.propDecorators = {
        '_open': [{ type: Input, args: ["clrModalOpen",] },],
        '_openChanged': [{ type: Output, args: ["clrModalOpenChange",] },],
        'closable': [{ type: Input, args: ["clrModalClosable",] },],
        'size': [{ type: Input, args: ["clrModalSize",] },],
        'staticBackdrop': [{ type: Input, args: ["clrModalStaticBackdrop",] },],
        'close': [{ type: HostListener, args: ["body:keyup.escape",] },],
    };
    return Modal;
}());
//# sourceMappingURL=modal.js.map